services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: scheduler_db
      POSTGRES_USER: scheduler_user
      POSTGRES_PASSWORD: scheduler_password
      TZ: Europe/Moscow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scheduler_user -d scheduler_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    user: "999:999"

  qwen25:
    image: ghcr.io/ggml-org/llama.cpp:server
    container_name: qwen25
    ports:
      - "8000:8000"
    volumes:
      - ./models:/models:ro
    command: [
      "-m", "/models/qwen2.5-7b-instruct-q4_k_m-00001-of-00002.gguf",
      "--port","8000",
      "--ctx-size","4096",
      "--batch-size","512",
      "--ubatch-size","128",
      "--threads","16",
      "--parallel", "2",
      "--n-predict", "256",
      "--no-warmup",
      "--cont-batching",
      "--metrics"
    ]
    environment:
      TZ: Europe/Moscow
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || curl -fsS http://localhost:8000/v1/models"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "1000:1000"
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
      qwen25:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8000"
    volumes:
      - ./demo/minutes:/app/data/minutes:ro
      - ./backend/media:/app/media
      - ./backend/logs:/app/logs
    environment:
      # Database
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: scheduler_db
      DB_USER: scheduler_user
      DB_PASSWORD: scheduler_password
      
      # LLM Configuration
      LLM_MODE: llama
      LLM_BASE_URL: http://qwen25:8000/v1
      LLM_MODEL: qwen2.5-7b-instruct
      LLM_API_KEY: sk-no-key
      LLM_TIMEOUT_S: 300
      LLM_RETRIES: 2
      
      # Application Settings
      DJANGO_SECRET_KEY: your-secret-key-change-in-production
      DEBUG: "true"
      ALLOWED_HOSTS: localhost,127.0.0.1,backend
      
      # File Processing
      MAX_FILE_SIZE_MB: 20
      MAX_WINDOWS_PER_FILE: 100
      RAPIDFUZZ_THRESHOLD: 82
      
      # Timezone
      TZ: Europe/Moscow
      
      # LangChain
      LANGCHAIN_TRACING_V2: "false"
      LANGCHAIN_PROJECT: scheduler-parser
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    user: "1000:1000"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server","--save","","--appendonly","no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:8080"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      TZ: Europe/Moscow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    user: "101:101"
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: scheduler_network